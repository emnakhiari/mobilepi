package com.mycompany.myapp;


import com.codename1.components.FloatingHint;
import com.codename1.components.ImageViewer;
import com.codename1.components.SpanLabel;
import com.codename1.io.ConnectionRequest;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.io.NetworkManager;
import com.codename1.ui.Button;
import com.codename1.ui.ComboBox;
import com.codename1.ui.Container;
import com.codename1.ui.TextField;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.mycomany.entities.User;
import com.mycomany.utils.Statics;
import com.mycompany.gui.SignInForm;
import com.mycompany.gui.SignUpForm;
import com.mycompany.services.ServiceUtilisateur;
import java.util.ArrayList;
import java.util.Vector;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
       
        
//     
//              Form hi = new Form("Hi World", BoxLayout.y());
//         Form f1 = new Form("page1");
//      Form f2 = new Form("home");
//      Form f3 = new Form("about");
//    
//      Label l = new Label("Welcome :admin");
//      hi.add(l);
//     
//      
//   ImageViewer img = new ImageViewer(theme.getImage("nader.png"));
//     SpanLabel description = new SpanLabel("mr nader ...............");
//     Container r=new Container();
//     r.addAll(description);
//     f3.add(r);
//     f3.add(img);
//      
//     String url = "http://localhost/hello.txt";
//          
//         ConnectionRequest con=new ConnectionRequest();
//        con.setUrl(url);
//   
//        con.addResponseListener(e->{
//        String reponse=new String(con.getResponseData());
//        Label lb=new Label(reponse);
//        f2.add(lb);
//        });
//       
//       
//     NetworkManager.getInstance().addToQueueAndWait(con);
//         
//        ///////////////////////////////////////////////////////
////          String url1 = " https://127.0.0.1:8000/connexion";
////          
////         ConnectionRequest con1=new ConnectionRequest();
////        con.setUrl(url);
////   
////        con.addResponseListener(e->{
////        String reponse=new String(con.getResponseData());
////        Label lb=new Label(reponse);
////     
////        });
////      
////       
////     NetworkManager.getInstance().addToQueueAndWait(con1);
//        
//        ////////////////////////////////////////////////////////////// 
//      
//      
//      
//   
//      hi.getToolbar().addCommandToSideMenu("page1", null, ev -> f1.show());
//      hi.getToolbar().addCommandToSideMenu("home", null, ev -> f2.show());
//      hi.getToolbar().addCommandToSideMenu("about", null, ev ->f3.show());
//      /*1.getToolbar().addCommandToLeftBar("back", null, ev -> hi.show());
//      f2.getToolbar().addCommandToLeftBar("back", null, ev -> hi.show());
//      f3.getToolbar().addCommandToLeftBar("back", null, ev -> hi.show());*/
//      
//         f3.getToolbar().addCommandToOverflowMenu("back", null, ev->hi.show());
//        f3.getToolbar().addCommandToOverflowMenu("exit", null,
//                ev->Display.getInstance().exitApplication());
//        
//              f2.getToolbar().addCommandToOverflowMenu("back", null, ev->hi.show());
//        f2.getToolbar().addCommandToOverflowMenu("exit", null,
//                ev->Display.getInstance().exitApplication());
//             
//        f1.getToolbar().addCommandToOverflowMenu("exit", null,
//                ev->Display.getInstance().exitApplication());
////       Form h = new Form("Hi World ",new FlowLayout(CENTER,CENTER));
////        TextField username = new TextField();
////        TextField password = new TextField(); 
////        password.setConstraint(TextField.PASSWORD);
////        Button btn = new Button("Valider");
////        h.addAll(username,password,btn);
////        h.show();
////        btn.addActionListener(e->{
////            
////            
////          if(login.getText().equals("admin") && password.getText().equals("admin"))
////        {
////            hi.show();
////        }
////        else{
////            String st="login ou pwd invalid "; 
////            Dialog.show("error", st ,"cancel" ,"ok");
////        }
////          
////        
////        
////        });
//        
//         
//        TextField username = new TextField("", "Username", 20, TextField.ANY);
//        TextField password = new TextField("", "Password", 20, TextField.PASSWORD);
//        username.setSingleLineTextArea(false);
//        password.setSingleLineTextArea(false);
//        Button signIn = new Button("Sign In");
//        Button signUp = new Button("Sign Up");
//        
//        //mp oubliÃ©
//        Button  mp = new Button("oublier mot de passe?","CenterLabel");
//        
//        
//       // signUp.addActionListener(e -> new SignUpForm(res).show());
//        signUp.setUIID("Link");
//        Label doneHaveAnAccount = new Label("Vous n'avez aucune compte?");
//      
//        signIn.requestFocus();
//        
//        signIn.addActionListener(e -> 
//        {
//               ServiceUtilisateur.getInstance().signin(username, password, res);
//
//           
//        });
//        
//        
//        
        Form fi = new Form("Hi World", new FlowLayout(CENTER,CENTER));
        TextField username = new TextField("", "Username", 20, TextField.ANY);
        TextField email = new TextField("", "E-Mail", 20, TextField.EMAILADDR);
        TextField password = new TextField("", "Password", 20, TextField.PASSWORD);
        TextField confirmPassword = new TextField("", "Confirm Password", 20, TextField.PASSWORD);
           TextField num = new TextField("", "E-Mail", 20, TextField.EMAILADDR);
              TextField adresse = new TextField("", "E-Mail", 20, TextField.EMAILADDR);
        
           //Role 
        //Vector 3ibara ala array 7atit fiha roles ta3na ba3d nzidouhom lel comboBox
        Vector<String> vectorRole;
        vectorRole = new Vector();
        
        vectorRole.add("Client");
        vectorRole.add("Responsable");
        
        ComboBox<String>roles = new ComboBox<>(vectorRole);

        username.setSingleLineTextArea(false);
        email.setSingleLineTextArea(false);
        password.setSingleLineTextArea(false);
        confirmPassword.setSingleLineTextArea(false);
        Button next = new Button("s'inscrire");
        Button signIn = new Button("afficher");
         Button connexion = new Button("connexion");
      //  signIn.addActionListener(e -> new SignInForm(res).show());
      
        Label alreadHaveAnAccount = new Label("Already have an account?");
        
        Container content = new Container(BoxLayout.y());
        content.addAll(username,password,email,confirmPassword,num,adresse,alreadHaveAnAccount,next,signIn);
        fi.add(content);
        
        fi.show();
           Form f1 = new Form(BoxLayout.y());
             Form f2 = new Form(BoxLayout.y());
           
        
        signIn.addActionListener((e) -> {
            
            Label a=new Label();
              ArrayList<User> result = new ArrayList<>();
          result=ServiceUtilisateur.getInstance().affichageUser();
         a.setText(result+"");
         f1.add(a);
        f1.show();
        });
      
          TextField email1 = new TextField("", "E-Mail", 20, TextField.EMAILADDR);
        TextField password2 = new TextField("", "Password", 20, TextField.PASSWORD);
           Container content1 = new Container(BoxLayout.y());
        content1.addAll(email1,password2,connexion);
        f2.add(content1);
        next.addActionListener((e) -> {
            
            ServiceUtilisateur.getInstance().signup(username, password, email, confirmPassword,num,adresse, roles);
            Dialog.show("Success","account is saved","OK",null);
         f2.show();
            //new SignInForm(res).show();
        });
    }
    
      
    

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

}
